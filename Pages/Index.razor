@page "/"
@inject IDialogService DialogService

<MudContainer>

    <MudGrid Justify="Justify.Center">
        <MudItem Style="max-width: 500px;" xs="12" md="6">
            <MudText Typo="Typo.h5" Style="justify-content: center">ISAM Index</MudText>
            <h3>Add Record</h3>
            <MudForm>
                <MudTextField @bind-Value="@key" Immediate="true" Label="Key"/>
                <MudTextField @bind-Value="@data" Immediate="true" Label="Data"/>
                <MudTextField @bind-Value="@maxRecords" Immediate="true" Variant="Variant.Text" Adornment="Adornment.End" Label="Max Records"/>
                <MudTextField @bind-Value="@recordSize" Immediate="true" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="Byte" AdornmentColor="Color.Info" Label="Record Size"/>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="AddRecord">Add Record</MudButton>
            </MudForm>
        </MudItem>

        <MudItem Style="max-width: 500px;" xs="12" md="6">
            <h3>Find Record</h3>
            <MudForm>
                <MudTextField @bind-Value="@searchKey" Label="Key"/>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FindInPage" OnClick="FindRecord">Find Record</MudButton>
            </MudForm>
        </MudItem>
        @{
            if (string.IsNullOrEmpty(_errorMessage))
            {  
                return;
            }
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Configuration.PreventDuplicates = false;
            Snackbar.Configuration.NewestOnTop = true;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Configuration.HideTransitionDuration = 300;
            Snackbar.Configuration.VisibleStateDuration = 3000;
            Snackbar.Configuration.ShowTransitionDuration = 300;
            Snackbar.Add(_errorMessage, Severity.Error);
            _errorMessage = null;
        }

    </MudGrid>

    @if (!string.IsNullOrEmpty(searchResult))
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" md="6">
                @{
                    var messageBox = DialogService.ShowMessageBox("Search Result", searchResult, yesText: "Close");
                    searchResult = null;
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private string key;
    private string data;
    private string searchKey;
    private string searchResult;
    private int maxRecords = 10;
    private int recordSize = 100;
    string _errorMessage = "";


    private void AddRecord()
    {
        if (string.IsNullOrEmpty(key) || data=="" || maxRecords == 0 || recordSize == 0)
        {
            Snackbar.Add("Please enter values for all fields.", Severity.Warning);
            return;
        }

        var isam = new ISAM("data.dat", "index.dat", maxRecords, recordSize);
        try
        {
            isam.CreateDataFile();
            isam.CreateIndexFile();
            isam.WriteRecord(key, data);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Configuration.PreventDuplicates = false;
            Snackbar.Configuration.NewestOnTop = true;
            Snackbar.Configuration.SnackbarVariant = Variant.Filled;
            Snackbar.Configuration.MaxDisplayedSnackbars = 10;
            Snackbar.Configuration.HideTransitionDuration = 300;
            Snackbar.Configuration.VisibleStateDuration = 3000;
            Snackbar.Configuration.ShowTransitionDuration = 300;

            Snackbar.Add("Record added successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            isam.Close();
        }
    }

    private void FindRecord()
    {
        if (string.IsNullOrEmpty(searchKey))
        {
            Snackbar.Add("Please enter values in fields.", Severity.Warning);
            return;
        }
        var isam = new ISAM("data.dat", "index.dat", maxRecords, recordSize);
        try
        {
            searchResult = isam.ReadRecord(searchKey);
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
        finally
        {
            isam.Close();
        }
    }

    public class ISAM
    {
        private readonly string dataFilePath;
        private readonly string indexFilePath;
        private FileStream dataStream;
        private FileStream indexStream;
        private readonly int maxRecords;
        private readonly int recordSize;

        public ISAM(string dataFilePath, string indexFilePath, int maxRecords, int recordSize)
        {
            this.dataFilePath = dataFilePath;
            this.indexFilePath = indexFilePath;
            this.maxRecords = maxRecords;
            this.recordSize = recordSize;
        }

        public void CreateDataFile()
        {
            if (dataStream is null)
            {
                dataStream = new FileStream(dataFilePath, FileMode.Create, FileAccess.Write);
            }
        }

        public void CreateIndexFile()
        {
            if (indexStream is null)
            {
                indexStream = new FileStream(indexFilePath, FileMode.Create, FileAccess.Write);
            }
        }

        public void WriteRecord(string key, string data)
        {
            var keyBytes = Encoding.ASCII.GetBytes(key);
            var dataBytes = Encoding.ASCII.GetBytes(data);

            if (dataBytes.Length + keyBytes.Length > recordSize)
            {
                throw new Exception("Record size is too large.");
            }

            var position = dataStream.Length;

            if (data.Length < maxRecords )
            {
                throw new Exception("Overflow occurred.");
            }

            dataStream.Write(keyBytes, 0, keyBytes.Length);
            dataStream.Write(dataBytes, 0, dataBytes.Length);

            indexStream.Write(keyBytes, 0, keyBytes.Length);
            indexStream.Write(BitConverter.GetBytes(position), 0, sizeof(long));
        }

        public string ReadRecord(string key)
        {
            var keyBytes = Encoding.ASCII.GetBytes(key);

            var buffer = new byte[keyBytes.Length + sizeof(long)];
            int bytesRead;

            using (indexStream = new FileStream(indexFilePath, FileMode.Open, FileAccess.Read))
            {
                while (indexStream != null && (bytesRead = indexStream.Read(buffer, 0, buffer.Length)) == buffer.Length)
                {
                    if (keyBytes.SequenceEqual(buffer.Take(keyBytes.Length)))
                    {
                        var position = BitConverter.ToInt64(buffer, keyBytes.Length);
                        using (dataStream = new FileStream(dataFilePath, FileMode.Open, FileAccess.Read))
                        {
                            var data = new byte[dataStream.Length - position];
                            dataStream.Read(data, (int)position, data.Length);
                            return Encoding.ASCII.GetString(data);
                        }
                    }
                }
            }

            throw new Exception("Record not found.");
        }

        public void Close()
        {
            if (dataStream != null)
            {
                dataStream.Close();
                dataStream = null;
            }

            if (indexStream != null)
            {
                indexStream.Close();
                indexStream = null;
            }
        }
    }

}